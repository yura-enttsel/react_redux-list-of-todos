{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filterState","visibleTodos","useMemo","titleLow","title","toLowerCase","queryLow","completed","includes","currentId","id","length","className","map","cn","onClick","TodoActions","handleSelect","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","useState","user","setUser","loadUser","idUser","a","loadedUser","Error","useEffect","href","email","name","App","isLoading","setIsLoading","loadTodos","loadedTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3422996b.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY'\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\ntype Action = SetQueryAction | SetStatusAction;\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: SetTodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { FC, useMemo } from 'react';\nimport cn from 'classnames';\nimport { actions as TodoActions } from '../../features/currentTodo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  currentTodo: Todo | null;\n};\n\nexport const TodoList: FC<Props> = ({ todos, currentTodo }) => {\n  const dispatch = useAppDispatch();\n  const filterState = useAppSelector(state => state.filter);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const titleLow = todo.title.toLowerCase();\n      const queryLow = filterState.query.toLowerCase();\n      const { completed } = todo;\n\n      switch (filterState.status) {\n        case 'all':\n          return titleLow.includes(queryLow);\n        case 'active':\n          return !completed && titleLow.includes(queryLow);\n        case 'completed':\n          return completed && titleLow.includes(queryLow);\n        default:\n          return todo;\n      }\n    });\n  }, [filterState, todos]);\n\n  const handleSelect = (todo: Todo) => dispatch(TodoActions.setTodo(todo));\n  const currentId = currentTodo ? currentTodo.id : 0;\n\n  return (\n    <>\n      {!visibleTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => {\n              const { id, title, completed } = todo;\n\n              return (\n                <tr\n                  data-cy=\"todo\"\n                  className={cn({\n                    'has-background-info-light': id === currentId,\n                  })}\n                  key={id}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={cn({\n                        'has-text-success': completed,\n                        'has-text-danger': !completed,\n                      })}\n                    >\n                      {title}\n                    </p>\n                  </td>\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      aria-label=\"Select todo button\"\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handleSelect(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className={cn('far', {\n                          'fa-eye': id !== currentId,\n                          'fa-eye-slash': id === currentId,\n                        })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter = () => {\n  const dispatch = useAppDispatch();\n  const filterState = useAppSelector(state => state.filter);\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleQueryClear = () => dispatch(filterActions.setQuery(''));\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterState.status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filterState.query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filterState.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"delete button\"\n              onClick={handleQueryClear}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { FC, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  currentTodo: Todo;\n};\n\nexport const TodoModal: FC<Props> = ({\n  currentTodo: {\n    id, title, completed, userId,\n  },\n}) => {\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n\n  const loadUser = async (idUser: number) => {\n    try {\n      const loadedUser = await getUser(idUser);\n\n      setUser(loadedUser);\n    } catch {\n      throw new Error('Loading user error');\n    }\n  };\n\n  useEffect(() => {\n    loadUser(userId);\n  }, []);\n\n  const handleModalClose = () => dispatch(actions.removeTodo());\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              aria-label=\"Close button\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleModalClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nexport const App = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadTodos = async () => {\n    setIsLoading(true);\n    try {\n      const loadedTodos = await getTodos();\n\n      dispatch(todosActions.setTodos(loadedTodos));\n    } catch {\n      throw new Error('Loading todos error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {todos.length > 0 && (\n                <TodoList\n                  todos={todos}\n                  currentTodo={currentTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal currentTodo={currentTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}